#function [best_rmse, best_koeff, mpg_best] = (norm, koeff,rmse, mpg, anzahl_koefs, anzahl_Kinder)function [best_rmse, best_koeff, best_mpg] = evolutionalt(norm, rmse, koeff, mpg, anzahl_koefs, anzahl_kinder, iterationen);  best_koeff = koeff;  best_rmse = rmse;  best_mpg = mpg;  for x = 0 : iterationen    #children = []    for i = 1 : anzahl_kinder       for j = 1 : anzahl_koefs        children(i,j) = koeff(1,j) + (rand(1,1)-0.5 ./100);        # .+ ((rand(1,6).-0.5) ./ 10);]       endfor    endfor    for i = 1 : anzahl_kinder      #temp_pred = [norm(:,1) .* children(i,1) + norm(:,2) .* children(i,2) + norm(:,3) .* children(i,3) + norm(:,4) .* children(i,4) + norm(:,5) .* children(i,5) + norm(:,6) .* children(i,6)];      temp_pred = calculatePrediction(norm, children(i,:));      #max(temp_pred)      #min(temp_pred)      denorm_t_p = denorm(temp_pred, mpg);      #denorm_t_p      temp_rmse = sqrt(sum((denorm_t_p .- mpg).^2)/ length(norm));      if(temp_rmse < best_rmse )        best_koeff = [children(i,:)];        best_rmse = temp_rmse;        best_mpg = denorm_t_p;              endif    endfor    best_rmse;  endforendfunction