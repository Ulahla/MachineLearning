  # Prevent Octave from thinking that this# is a function file:clear;# Load the nations.csv filecars = dlmread("cars.csv", ",", 1, 1);cylinder = [cars(:,1)];displacement = [cars(:,2)];horsepower = [cars(:,3)];weight = [cars(:,4)];acceleration = [cars(:,5)];year = [cars(:,6)];# Normalisieren[cylinder_norm] = norm(cylinder);[displacement_norm] = norm(displacement);[horsepower_norm] = norm(horsepower);[weight_norm] = norm(weight);[acceleration_norm] = norm(acceleration);[year_norm] = norm(year);# Denormalisieren[cylinder_denorm] = denorm(cylinder_norm, cylinder);[displacement_denorm] = denorm(displacement_norm,displacement);[horsepower_denorm] = denorm(horsepower_norm, horsepower);[weight_denorm] = denorm(weight_norm, weight);[acceleration_denorm] = denorm(acceleration_norm, acceleration);[year_denorm] = denorm(year_norm, year);koeff = rand(1,6);koeff .-= 0.5;koeff .*= 2;norm = [cylinder_norm displacement_norm horsepower_norm weight_norm acceleration_norm year_norm];[mpg_predict] = calculatePrediction(norm, koeff, 0);#mpg_predict = [cylinder_norm .* koeff(1,1) + displacement_norm .* koeff(1,2) + horsepower_norm .* koeff(1,3) + weight_norm .* koeff(1,4) + acceleration_norm .* koeff(1,5) + year_norm .* koeff(1,6)];mpg_pre_denorm = denorm(mpg_predict, cars(:,7));rmse_pre = sqrt(sum((mpg_pre_denorm .- cars(:,7)).^2)/ length(cars));printf('\nThe rmse the evolution-function starts with = %f\n', rmse_pre)#[best_rmse, best_koeff, mpg_best] = (norm, koeff,rmse, mpg, n, anzahl_kinder);# function [best_rmse, best_koeff, best_mpg] = evolution(norm, rmse, koeff, mpg, anzahl_koefs, anzahl_kinder, iterationen);[best_rmse, best_koeff, best_mpg] = evolution(norm, rmse_pre, koeff, cars(:,7), 6, 3, 100);printf('The evolution-function is executed with 1000 Iterations each one with 3 kids (both can be changed within the function call)\n')#[best_rmse_alt, best_koeff, best_mpg] = evolutionalt(norm, rmse_pre, koeff, cars(:,7), 6, 3, 1000);#display("Best rmse = ") display(best_rmse)#best_koeff#best_mpgprintf('The best rmse the evolution found = %f\n', best_rmse)#best_rmse_alt# 4 predictionline_4 = calculatePrediction(norm, best_koeff, 4);line_4_denorm = denorm(line_4, cars(:,7));#disp('Zeile 4, prediction = '), disp(linefour_denorm), disp('vorgegebener Wert = '), disp(cars(4,7))printf('line 04, my prediction = %f, and the actual gpm = %f\n', line_4_denorm, cars(4,7))# 57 predictionline_57 = calculatePrediction(norm, best_koeff, 57);line_57_denorm = denorm(line_57, cars(:,7));#disp('Zeile 57, prediction = '), disp(line_57_denorm), disp('vorgegebener Wert = '), disp(cars(57,7))printf('line 57, my prediction = %f, and the actual gpm = %f\n', line_57_denorm, cars(57,7))# 117 predictionline_117 = calculatePrediction(norm, best_koeff, 117);line_117_denorm = denorm(line_117, cars(:,7));#disp('Zeile 117, prediction = '), disp(line_117_denorm), disp('vorgegebener Wert = '), disp(cars(117,7))printf('line 117, my prediction = %f, and the actual gpm = %f\n', line_117_denorm, cars(117,7))# 219 predictionline_219 = calculatePrediction(norm, best_koeff, 219);line_219_denorm = denorm(line_219, cars(:,7));#disp('Zeile 219, prediction = '), disp(line_219_denorm), disp('vorgegebener Wert = '), disp(cars(219,7))printf('line 219, my prediction = %f, and the actual gpm = %f\n', line_219_denorm, cars(219,7))