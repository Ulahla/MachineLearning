# Prevent Octave from thinking that this# is a function file:clear;# Load the nations.csv filecars = dlmread("cars.csv", ",", 1, 1);cylinder = [cars(:,1)];displacement = [cars(:,2)];horsepower = [cars(:,3)];weight = [cars(:,4)];acceleration = [cars(:,5)];year = [cars(:,6)];mpg = [cars(:,7)];# Normalisieren[cylinder_norm] = norm(cylinder);[displacement_norm] = norm(displacement);[horsepower_norm] = norm(horsepower);[weight_norm] = norm(weight);[acceleration_norm] = norm(acceleration);[year_norm] = norm(year);[mpg_norm] = norm(mpg);# Denormalisieren[cylinder_denorm] = denorm(cylinder_norm, cylinder);[displacement_denorm] = denorm(displacement_norm,displacement);[horsepower_denorm] = denorm(horsepower_norm, horsepower);[weight_denorm] = denorm(weight_norm, weight);[acceleration_denorm] = denorm(acceleration_norm, acceleration);[year_denorm] = denorm(year_norm, year);# Thetarand("seed", 7); theta = rand(1, 6);#m = 6;m = 392;iteration = 100;norm = [cylinder_norm displacement_norm horsepower_norm weight_norm acceleration_norm year_norm];mpg_predict = calculatePrediction(norm, theta, 0);mpg_predict_denorm = denorm(mpg_predict, mpg);figure;axis([0,100,1,60])xlabel("iterationen")ylabel("RMSE")hold;x = [1:1:iteration];# Do the plottingalpha_001 = 0.01;[rmse_001, theta_best] = regression (alpha_001, m, theta, iteration, mpg_predict, mpg_norm, norm, mpg);plot(x,rmse_001)printf('Best rmse for alpha = %i = %f\n', alpha_001, min(rmse_001))alpha_01 = 0.1;[rmse_01, theta_best] = regression (alpha_01, m, theta, iteration, mpg_predict, mpg_norm, norm, mpg);plot(x,rmse_01, "y")printf('Best rmse for alpha = %i = %f\n', alpha_01, min(rmse_01))alpha_1 = 1;[rmse_1, theta_best] = regression (alpha_1, m, theta, iteration, mpg_predict, mpg_norm, norm, mpg);plot(x,rmse_1, "r")printf('Best rmse for alpha = %i = %f\n', alpha_1, min(rmse_1))alpha_2 = 2;[rmse_2, theta_best] = regression (alpha_2, m, theta, iteration, mpg_predict, mpg_norm, norm, mpg);plot(x,rmse_2, "g")printf('Best rmse for alpha = %i = %f\n', alpha_2, min(rmse_2))legend ({'alpha = 0.01','alpha = 0.1','alpha = 1','alpha = 2'});legend left;#regression#diff = [mpg_predict .- mpg_norm];#delta_theta = norm' * diff;#delta_theta_strich = (alpha/m) * delta_theta;#theta_new = theta' - delta_theta_strich