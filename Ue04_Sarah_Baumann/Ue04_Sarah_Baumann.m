  # Prevent Octave from thinking that this# is a function file:clear;# Load the nations.csv filecars = dlmread("cars.csv", ",", 1, 1);cylinder = [cars(:,1)];displacement = [cars(:,2)];horsepower = [cars(:,3)];weight = [cars(:,4)];acceleration = [cars(:,5)];year = [cars(:,6)];mpg = [cars(:,7)];# Normalisieren[cylinder_norm] = norm(cylinder);[displacement_norm] = norm(displacement);[horsepower_norm] = norm(horsepower);[weight_norm] = norm(weight);[acceleration_norm] = norm(acceleration);[year_norm] = norm(year);[mpg_norm] = norm(mpg);# Denormalisieren[cylinder_denorm] = denorm(cylinder_norm, cylinder);[displacement_denorm] = denorm(displacement_norm,displacement);[horsepower_denorm] = denorm(horsepower_norm, horsepower);[weight_denorm] = denorm(weight_norm, weight);[acceleration_denorm] = denorm(acceleration_norm, acceleration);[year_denorm] = denorm(year_norm, year);# Thetarand("seed", 7); theta = rand(1, 6);#theta .-= 0.5;theta .*= 2;m = 6;iteration = 50;norm = [cylinder_norm displacement_norm horsepower_norm weight_norm acceleration_norm year_norm];mpg_predict = calculatePrediction(norm, theta, 0);alpha = 0.01;[theta_best, rmse_best] = regression (alpha, m, theta, iteration, mpg_predict, mpg_norm, norm);rmse_bestalpha = 0.1;[theta_best, rmse_best] = regression (alpha, m, theta, iteration, mpg_predict, mpg_norm, norm);rmse_best#regression#diff = [mpg_predict .- mpg_norm];#delta_theta = norm' * diff;#delta_theta_strich = (alpha/m) * delta_theta;#theta_new = theta' - delta_theta_strich